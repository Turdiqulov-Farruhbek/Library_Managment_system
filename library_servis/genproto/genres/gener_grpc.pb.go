// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/gener.proto

package genres

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GenresService_GetGenres_FullMethodName         = "/genres.GenresService/GetGenres"
	GenresService_GetGenreById_FullMethodName      = "/genres.GenresService/GetGenreById"
	GenresService_CreateGenre_FullMethodName       = "/genres.GenresService/CreateGenre"
	GenresService_UpdateGenre_FullMethodName       = "/genres.GenresService/UpdateGenre"
	GenresService_DeleteGenre_FullMethodName       = "/genres.GenresService/DeleteGenre"
	GenresService_GetByGenreIdBooks_FullMethodName = "/genres.GenresService/GetByGenreIdBooks"
)

// GenresServiceClient is the client API for GenresService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GenresService defines the genre-related RPC services
type GenresServiceClient interface {
	GetGenres(ctx context.Context, in *GetGenresRequest, opts ...grpc.CallOption) (*GetGenresResponse, error)
	GetGenreById(ctx context.Context, in *GetGenreByIdRequest, opts ...grpc.CallOption) (*GetGenreByIdResponse, error)
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error)
	UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error)
	DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error)
	GetByGenreIdBooks(ctx context.Context, in *GetgenresByGenreIdRequest, opts ...grpc.CallOption) (*GetgenresResponse, error)
}

type genresServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenresServiceClient(cc grpc.ClientConnInterface) GenresServiceClient {
	return &genresServiceClient{cc}
}

func (c *genresServiceClient) GetGenres(ctx context.Context, in *GetGenresRequest, opts ...grpc.CallOption) (*GetGenresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenresResponse)
	err := c.cc.Invoke(ctx, GenresService_GetGenres_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genresServiceClient) GetGenreById(ctx context.Context, in *GetGenreByIdRequest, opts ...grpc.CallOption) (*GetGenreByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenreByIdResponse)
	err := c.cc.Invoke(ctx, GenresService_GetGenreById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genresServiceClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGenreResponse)
	err := c.cc.Invoke(ctx, GenresService_CreateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genresServiceClient) UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGenreResponse)
	err := c.cc.Invoke(ctx, GenresService_UpdateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genresServiceClient) DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGenreResponse)
	err := c.cc.Invoke(ctx, GenresService_DeleteGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genresServiceClient) GetByGenreIdBooks(ctx context.Context, in *GetgenresByGenreIdRequest, opts ...grpc.CallOption) (*GetgenresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetgenresResponse)
	err := c.cc.Invoke(ctx, GenresService_GetByGenreIdBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenresServiceServer is the server API for GenresService service.
// All implementations must embed UnimplementedGenresServiceServer
// for forward compatibility
//
// GenresService defines the genre-related RPC services
type GenresServiceServer interface {
	GetGenres(context.Context, *GetGenresRequest) (*GetGenresResponse, error)
	GetGenreById(context.Context, *GetGenreByIdRequest) (*GetGenreByIdResponse, error)
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error)
	UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error)
	DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error)
	GetByGenreIdBooks(context.Context, *GetgenresByGenreIdRequest) (*GetgenresResponse, error)
	mustEmbedUnimplementedGenresServiceServer()
}

// UnimplementedGenresServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenresServiceServer struct {
}

func (UnimplementedGenresServiceServer) GetGenres(context.Context, *GetGenresRequest) (*GetGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedGenresServiceServer) GetGenreById(context.Context, *GetGenreByIdRequest) (*GetGenreByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreById not implemented")
}
func (UnimplementedGenresServiceServer) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedGenresServiceServer) UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedGenresServiceServer) DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedGenresServiceServer) GetByGenreIdBooks(context.Context, *GetgenresByGenreIdRequest) (*GetgenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGenreIdBooks not implemented")
}
func (UnimplementedGenresServiceServer) mustEmbedUnimplementedGenresServiceServer() {}

// UnsafeGenresServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenresServiceServer will
// result in compilation errors.
type UnsafeGenresServiceServer interface {
	mustEmbedUnimplementedGenresServiceServer()
}

func RegisterGenresServiceServer(s grpc.ServiceRegistrar, srv GenresServiceServer) {
	s.RegisterService(&GenresService_ServiceDesc, srv)
}

func _GenresService_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_GetGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).GetGenres(ctx, req.(*GetGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenresService_GetGenreById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).GetGenreById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_GetGenreById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).GetGenreById(ctx, req.(*GetGenreByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenresService_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenresService_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_UpdateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).UpdateGenre(ctx, req.(*UpdateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenresService_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_DeleteGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).DeleteGenre(ctx, req.(*DeleteGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenresService_GetByGenreIdBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetgenresByGenreIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenresServiceServer).GetByGenreIdBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenresService_GetByGenreIdBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenresServiceServer).GetByGenreIdBooks(ctx, req.(*GetgenresByGenreIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenresService_ServiceDesc is the grpc.ServiceDesc for GenresService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenresService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genres.GenresService",
	HandlerType: (*GenresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGenres",
			Handler:    _GenresService_GetGenres_Handler,
		},
		{
			MethodName: "GetGenreById",
			Handler:    _GenresService_GetGenreById_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _GenresService_CreateGenre_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _GenresService_UpdateGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _GenresService_DeleteGenre_Handler,
		},
		{
			MethodName: "GetByGenreIdBooks",
			Handler:    _GenresService_GetByGenreIdBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/gener.proto",
}
