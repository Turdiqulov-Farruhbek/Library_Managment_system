// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/borrowers.proto

package borrowers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BorrowersService_CreateBorrower_FullMethodName         = "/borrowers.BorrowersService/CreateBorrower"
	BorrowersService_GetBorrowerById_FullMethodName        = "/borrowers.BorrowersService/GetBorrowerById"
	BorrowersService_UpdateBorrower_FullMethodName         = "/borrowers.BorrowersService/UpdateBorrower"
	BorrowersService_DeleteBorrower_FullMethodName         = "/borrowers.BorrowersService/DeleteBorrower"
	BorrowersService_GetAllBorrowers_FullMethodName        = "/borrowers.BorrowersService/GetAllBorrowers"
	BorrowersService_GetBorrowingHistory_FullMethodName    = "/borrowers.BorrowersService/GetBorrowingHistory"
	BorrowersService_GetBorrowedBooksByUser_FullMethodName = "/borrowers.BorrowersService/GetBorrowedBooksByUser"
)

// BorrowersServiceClient is the client API for BorrowersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CRUD (Create, Read, Update, Delete) RPC methods for BorrowersService
type BorrowersServiceClient interface {
	CreateBorrower(ctx context.Context, in *CreateBorrowerRequest, opts ...grpc.CallOption) (*CreateBorrowerResponse, error)
	GetBorrowerById(ctx context.Context, in *GetBorrowerByIdRequest, opts ...grpc.CallOption) (*GetBorrowerByIdResponse, error)
	UpdateBorrower(ctx context.Context, in *UpdateBorrowerRequest, opts ...grpc.CallOption) (*UpdateBorrowerResponse, error)
	DeleteBorrower(ctx context.Context, in *DeleteBorrowerRequest, opts ...grpc.CallOption) (*DeleteBorrowerResponse, error)
	GetAllBorrowers(ctx context.Context, in *GetAllBorrowersRequest, opts ...grpc.CallOption) (*GetAllBorrowersResponse, error)
	GetBorrowingHistory(ctx context.Context, in *GetBorrowingHistoryRequest, opts ...grpc.CallOption) (*GetBorrowingHistoryResponse, error)
	GetBorrowedBooksByUser(ctx context.Context, in *GetBorrowedBooksByUserRequest, opts ...grpc.CallOption) (*GetBorrowedBooksByUserResponse, error)
}

type borrowersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowersServiceClient(cc grpc.ClientConnInterface) BorrowersServiceClient {
	return &borrowersServiceClient{cc}
}

func (c *borrowersServiceClient) CreateBorrower(ctx context.Context, in *CreateBorrowerRequest, opts ...grpc.CallOption) (*CreateBorrowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBorrowerResponse)
	err := c.cc.Invoke(ctx, BorrowersService_CreateBorrower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) GetBorrowerById(ctx context.Context, in *GetBorrowerByIdRequest, opts ...grpc.CallOption) (*GetBorrowerByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBorrowerByIdResponse)
	err := c.cc.Invoke(ctx, BorrowersService_GetBorrowerById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) UpdateBorrower(ctx context.Context, in *UpdateBorrowerRequest, opts ...grpc.CallOption) (*UpdateBorrowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBorrowerResponse)
	err := c.cc.Invoke(ctx, BorrowersService_UpdateBorrower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) DeleteBorrower(ctx context.Context, in *DeleteBorrowerRequest, opts ...grpc.CallOption) (*DeleteBorrowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBorrowerResponse)
	err := c.cc.Invoke(ctx, BorrowersService_DeleteBorrower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) GetAllBorrowers(ctx context.Context, in *GetAllBorrowersRequest, opts ...grpc.CallOption) (*GetAllBorrowersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBorrowersResponse)
	err := c.cc.Invoke(ctx, BorrowersService_GetAllBorrowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) GetBorrowingHistory(ctx context.Context, in *GetBorrowingHistoryRequest, opts ...grpc.CallOption) (*GetBorrowingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBorrowingHistoryResponse)
	err := c.cc.Invoke(ctx, BorrowersService_GetBorrowingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowersServiceClient) GetBorrowedBooksByUser(ctx context.Context, in *GetBorrowedBooksByUserRequest, opts ...grpc.CallOption) (*GetBorrowedBooksByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBorrowedBooksByUserResponse)
	err := c.cc.Invoke(ctx, BorrowersService_GetBorrowedBooksByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowersServiceServer is the server API for BorrowersService service.
// All implementations must embed UnimplementedBorrowersServiceServer
// for forward compatibility
//
// CRUD (Create, Read, Update, Delete) RPC methods for BorrowersService
type BorrowersServiceServer interface {
	CreateBorrower(context.Context, *CreateBorrowerRequest) (*CreateBorrowerResponse, error)
	GetBorrowerById(context.Context, *GetBorrowerByIdRequest) (*GetBorrowerByIdResponse, error)
	UpdateBorrower(context.Context, *UpdateBorrowerRequest) (*UpdateBorrowerResponse, error)
	DeleteBorrower(context.Context, *DeleteBorrowerRequest) (*DeleteBorrowerResponse, error)
	GetAllBorrowers(context.Context, *GetAllBorrowersRequest) (*GetAllBorrowersResponse, error)
	GetBorrowingHistory(context.Context, *GetBorrowingHistoryRequest) (*GetBorrowingHistoryResponse, error)
	GetBorrowedBooksByUser(context.Context, *GetBorrowedBooksByUserRequest) (*GetBorrowedBooksByUserResponse, error)
	mustEmbedUnimplementedBorrowersServiceServer()
}

// UnimplementedBorrowersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowersServiceServer struct {
}

func (UnimplementedBorrowersServiceServer) CreateBorrower(context.Context, *CreateBorrowerRequest) (*CreateBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBorrower not implemented")
}
func (UnimplementedBorrowersServiceServer) GetBorrowerById(context.Context, *GetBorrowerByIdRequest) (*GetBorrowerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowerById not implemented")
}
func (UnimplementedBorrowersServiceServer) UpdateBorrower(context.Context, *UpdateBorrowerRequest) (*UpdateBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrower not implemented")
}
func (UnimplementedBorrowersServiceServer) DeleteBorrower(context.Context, *DeleteBorrowerRequest) (*DeleteBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBorrower not implemented")
}
func (UnimplementedBorrowersServiceServer) GetAllBorrowers(context.Context, *GetAllBorrowersRequest) (*GetAllBorrowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBorrowers not implemented")
}
func (UnimplementedBorrowersServiceServer) GetBorrowingHistory(context.Context, *GetBorrowingHistoryRequest) (*GetBorrowingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowingHistory not implemented")
}
func (UnimplementedBorrowersServiceServer) GetBorrowedBooksByUser(context.Context, *GetBorrowedBooksByUserRequest) (*GetBorrowedBooksByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBooksByUser not implemented")
}
func (UnimplementedBorrowersServiceServer) mustEmbedUnimplementedBorrowersServiceServer() {}

// UnsafeBorrowersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowersServiceServer will
// result in compilation errors.
type UnsafeBorrowersServiceServer interface {
	mustEmbedUnimplementedBorrowersServiceServer()
}

func RegisterBorrowersServiceServer(s grpc.ServiceRegistrar, srv BorrowersServiceServer) {
	s.RegisterService(&BorrowersService_ServiceDesc, srv)
}

func _BorrowersService_CreateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).CreateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_CreateBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).CreateBorrower(ctx, req.(*CreateBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_GetBorrowerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).GetBorrowerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_GetBorrowerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).GetBorrowerById(ctx, req.(*GetBorrowerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_UpdateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).UpdateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_UpdateBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).UpdateBorrower(ctx, req.(*UpdateBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_DeleteBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).DeleteBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_DeleteBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).DeleteBorrower(ctx, req.(*DeleteBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_GetAllBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBorrowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).GetAllBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_GetAllBorrowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).GetAllBorrowers(ctx, req.(*GetAllBorrowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_GetBorrowingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).GetBorrowingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_GetBorrowingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).GetBorrowingHistory(ctx, req.(*GetBorrowingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowersService_GetBorrowedBooksByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowedBooksByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowersServiceServer).GetBorrowedBooksByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowersService_GetBorrowedBooksByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowersServiceServer).GetBorrowedBooksByUser(ctx, req.(*GetBorrowedBooksByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowersService_ServiceDesc is the grpc.ServiceDesc for BorrowersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borrowers.BorrowersService",
	HandlerType: (*BorrowersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBorrower",
			Handler:    _BorrowersService_CreateBorrower_Handler,
		},
		{
			MethodName: "GetBorrowerById",
			Handler:    _BorrowersService_GetBorrowerById_Handler,
		},
		{
			MethodName: "UpdateBorrower",
			Handler:    _BorrowersService_UpdateBorrower_Handler,
		},
		{
			MethodName: "DeleteBorrower",
			Handler:    _BorrowersService_DeleteBorrower_Handler,
		},
		{
			MethodName: "GetAllBorrowers",
			Handler:    _BorrowersService_GetAllBorrowers_Handler,
		},
		{
			MethodName: "GetBorrowingHistory",
			Handler:    _BorrowersService_GetBorrowingHistory_Handler,
		},
		{
			MethodName: "GetBorrowedBooksByUser",
			Handler:    _BorrowersService_GetBorrowedBooksByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/borrowers.proto",
}
